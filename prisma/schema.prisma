// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int      @id @default(autoincrement())
  name          String
  email         String   @unique
  cnpj          String   @unique
  corporateName String   @map(name: "corporate_name")
  phoneNumber   String   @map(name: "phone_number")
  password      String
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")

  partners   Partner[]
  invoices   Invoice[]
  expenses   Expense[]
  configs    Config[]
  categories Category[]


  @@map(name: "users")
}

model Partner {
  id            Int       @id @default(autoincrement())
  user          User      @relation(fields: [userId], references: [id])
  userId        Int
  name          String
  cnpj          String    @unique
  corporateName String    @map(name: "corporate_name")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  invoices      Invoice[]
}

model Invoice {
  id            Int     @id @default(autoincrement())
  user          User    @relation(fields: [userId], references: [id])
  userId        Int
  partner       Partner @relation(fields: [partnerId], references: [id])
  partnerId     Int
  invoiceNumber Int
  value         Float
  notes         String
}

model Expense {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  name          String
  value         Float
  notes         String
  paymentDate   DateTime @map(name: "payment_date")
  referenceDate DateTime @map(name: "reference_date")
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")
}

model Config {
  id     Int     @id @default(autoincrement())
  user   User    @relation(fields: [userId], references: [id])
  userId Int
  name   String
  value  Float
  active Boolean
}

model Category {
  id          Int     @id @default(autoincrement())
  user        User    @relation(fields: [userId], references: [id])
  userId      Int
  name        String
  description String
  active      Boolean
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}
